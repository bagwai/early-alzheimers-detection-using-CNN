{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":3364939,"sourceType":"datasetVersion","datasetId":2029496}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Essential libraries\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Image processing\nfrom PIL import Image\nimport cv2\n\n# Deep learning\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models, applications, Input, Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Model evaluation\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\n# Handling class imbalance\nfrom imblearn.over_sampling import ADASYN\n\n# Suppress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:00.489356Z","iopub.execute_input":"2024-09-15T01:13:00.489839Z","iopub.status.idle":"2024-09-15T01:13:09.916891Z","shell.execute_reply.started":"2024-09-15T01:13:00.489801Z","shell.execute_reply":"2024-09-15T01:13:09.915995Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Check GPU availability\nphysical_devices = tf.config.list_physical_devices('GPU')\nprint(\"Num GPUs Available: \", len(physical_devices))\nif physical_devices:\n    tf.config.experimental.set_memory_growth(physical_devices[0], True)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:09.918321Z","iopub.execute_input":"2024-09-15T01:13:09.918923Z","iopub.status.idle":"2024-09-15T01:13:10.124090Z","shell.execute_reply.started":"2024-09-15T01:13:09.918885Z","shell.execute_reply":"2024-09-15T01:13:10.123000Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Num GPUs Available:  1\n","output_type":"stream"}]},{"cell_type":"code","source":"# Base directory\nbase_dir = '/kaggle/input/alzheimer-mri-dataset/Dataset'\n\n# Classes in the dataset\nclasses = ['Mild_Demented', 'Moderate_Demented', 'Non_Demented', 'Very_Mild_Demented']","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:10.127231Z","iopub.execute_input":"2024-09-15T01:13:10.127985Z","iopub.status.idle":"2024-09-15T01:13:10.135816Z","shell.execute_reply.started":"2024-09-15T01:13:10.127946Z","shell.execute_reply":"2024-09-15T01:13:10.134898Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Initialize lists\nimage_paths = []\nlabels = []\n\n# Iterate through each class directory\nfor class_label in classes:\n    class_dir = os.path.join(base_dir, class_label)\n    for img_name in os.listdir(class_dir):\n        img_path = os.path.join(class_dir, img_name)\n        if os.path.isfile(img_path):\n            image_paths.append(img_path)\n            labels.append(class_label)\n\n# Create a DataFrame\ndata_df = pd.DataFrame({\n    'filepath': image_paths,\n    'label': labels\n})\n\nprint(f\"Total images collected: {len(data_df)}\")\nprint(data_df.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:10.137129Z","iopub.execute_input":"2024-09-15T01:13:10.137452Z","iopub.status.idle":"2024-09-15T01:13:12.776459Z","shell.execute_reply.started":"2024-09-15T01:13:10.137414Z","shell.execute_reply":"2024-09-15T01:13:12.775468Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Total images collected: 6400\n                                            filepath          label\n0  /kaggle/input/alzheimer-mri-dataset/Dataset/Mi...  Mild_Demented\n1  /kaggle/input/alzheimer-mri-dataset/Dataset/Mi...  Mild_Demented\n2  /kaggle/input/alzheimer-mri-dataset/Dataset/Mi...  Mild_Demented\n3  /kaggle/input/alzheimer-mri-dataset/Dataset/Mi...  Mild_Demented\n4  /kaggle/input/alzheimer-mri-dataset/Dataset/Mi...  Mild_Demented\n","output_type":"stream"}]},{"cell_type":"code","source":"# Encode textual labels to numerical values\nlabel_encoder = LabelEncoder()\ndata_df['label_encoded'] = label_encoder.fit_transform(data_df['label'])\n\n# Mapping of labels to encoded values\nlabel_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\nprint(\"Label Mapping:\", label_mapping)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:12.778287Z","iopub.execute_input":"2024-09-15T01:13:12.778738Z","iopub.status.idle":"2024-09-15T01:13:12.787395Z","shell.execute_reply.started":"2024-09-15T01:13:12.778686Z","shell.execute_reply":"2024-09-15T01:13:12.786268Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Label Mapping: {'Mild_Demented': 0, 'Moderate_Demented': 1, 'Non_Demented': 2, 'Very_Mild_Demented': 3}\n","output_type":"stream"}]},{"cell_type":"code","source":"# Visualize class distribution\nsns.countplot(x='label', data=data_df)\nplt.title('Class Distribution')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:12.788981Z","iopub.execute_input":"2024-09-15T01:13:12.789458Z","iopub.status.idle":"2024-09-15T01:13:13.073419Z","shell.execute_reply.started":"2024-09-15T01:13:12.789410Z","shell.execute_reply":"2024-09-15T01:13:13.072476Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Target image size\nIMG_WIDTH, IMG_HEIGHT = 128, 128\n\n# Function to load and preprocess images\ndef load_and_preprocess_image(image_path):\n    try:\n        # Load image\n        img = Image.open(image_path).convert('RGB')\n        img = img.resize((IMG_WIDTH, IMG_HEIGHT))\n        img_array = np.array(img)\n\n        # Normalize pixel values\n        img_array = img_array / 255.0\n\n        return img_array\n    except Exception as e:\n        print(f\"Error processing {image_path}: {e}\")\n        return None\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:13.074610Z","iopub.execute_input":"2024-09-15T01:13:13.074954Z","iopub.status.idle":"2024-09-15T01:13:13.081201Z","shell.execute_reply.started":"2024-09-15T01:13:13.074918Z","shell.execute_reply":"2024-09-15T01:13:13.080212Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Initialize lists\nX = []\ny = []\n\n# Iterate over data_df\nfor idx, row in data_df.iterrows():\n    img_path = row['filepath']\n    label = row['label_encoded']\n\n    img_processed = load_and_preprocess_image(img_path)\n    if img_processed is not None:\n        X.append(img_processed)\n        y.append(label)\n    else:\n        print(f\"Failed to process image: {img_path}\")\n\n# Convert to numpy arrays\nX = np.array(X)\ny = np.array(y)\n\nprint(f\"Image data shape: {X.shape}\")\nprint(f\"Labels shape: {y.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:13.082365Z","iopub.execute_input":"2024-09-15T01:13:13.082701Z","iopub.status.idle":"2024-09-15T01:13:35.328534Z","shell.execute_reply.started":"2024-09-15T01:13:13.082667Z","shell.execute_reply":"2024-09-15T01:13:35.327509Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Image data shape: (6400, 128, 128, 3)\nLabels shape: (6400,)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Flatten image data for ADASYN\nX_flat = X.reshape(len(X), -1)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:35.333469Z","iopub.execute_input":"2024-09-15T01:13:35.333873Z","iopub.status.idle":"2024-09-15T01:13:35.338092Z","shell.execute_reply.started":"2024-09-15T01:13:35.333837Z","shell.execute_reply":"2024-09-15T01:13:35.337180Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Instantiate ADASYN\nadasyn = ADASYN()\n\n# Apply ADASYN to the data\nX_resampled, y_resampled = adasyn.fit_resample(X_flat, y)\n\nprint(f\"Resampled data shape: {X_resampled.shape}\")\nprint(f\"Resampled labels shape: {y_resampled.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:13:35.341626Z","iopub.execute_input":"2024-09-15T01:13:35.342361Z","iopub.status.idle":"2024-09-15T01:14:15.289849Z","shell.execute_reply.started":"2024-09-15T01:13:35.342300Z","shell.execute_reply":"2024-09-15T01:14:15.288816Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Resampled data shape: (12737, 49152)\nResampled labels shape: (12737,)\n","output_type":"stream"}]},{"cell_type":"code","source":"X_resampled[8]","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:15.291168Z","iopub.execute_input":"2024-09-15T01:14:15.291510Z","iopub.status.idle":"2024-09-15T01:14:15.298916Z","shell.execute_reply.started":"2024-09-15T01:14:15.291474Z","shell.execute_reply":"2024-09-15T01:14:15.297843Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array([0., 0., 0., ..., 0., 0., 0.])"},"metadata":{}}]},{"cell_type":"code","source":"# Reshape X_resampled back to image dimensions\nX_resampled = X_resampled.reshape(-1, IMG_WIDTH, IMG_HEIGHT, 3)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:15.300235Z","iopub.execute_input":"2024-09-15T01:14:15.300659Z","iopub.status.idle":"2024-09-15T01:14:15.311986Z","shell.execute_reply.started":"2024-09-15T01:14:15.300597Z","shell.execute_reply":"2024-09-15T01:14:15.310936Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Decode labels to check distribution\ny_resampled_labels = label_encoder.inverse_transform(y_resampled)\nsns.countplot(x=y_resampled_labels)\nplt.title('Class Distribution After ADASYN')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:15.313122Z","iopub.execute_input":"2024-09-15T01:14:15.313438Z","iopub.status.idle":"2024-09-15T01:14:15.568484Z","shell.execute_reply.started":"2024-09-15T01:14:15.313405Z","shell.execute_reply":"2024-09-15T01:14:15.567489Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Data augmentation for training\ntrain_datagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=True,\n    zoom_range=0.1\n)\n\n# No augmentation for validation and test sets\ntest_datagen = ImageDataGenerator()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:15.569974Z","iopub.execute_input":"2024-09-15T01:14:15.570413Z","iopub.status.idle":"2024-09-15T01:14:15.576028Z","shell.execute_reply.started":"2024-09-15T01:14:15.570364Z","shell.execute_reply":"2024-09-15T01:14:15.575089Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# Split resampled data into training and test sets (80% training, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(\n    X_resampled, y_resampled, test_size=0.2, stratify=y_resampled, random_state=42)\n\nprint(f\"Training data shape: {X_train.shape}\")\nprint(f\"Test data shape: {X_test.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:15.577246Z","iopub.execute_input":"2024-09-15T01:14:15.577561Z","iopub.status.idle":"2024-09-15T01:14:16.895200Z","shell.execute_reply.started":"2024-09-15T01:14:15.577528Z","shell.execute_reply":"2024-09-15T01:14:16.894138Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Training data shape: (10189, 128, 128, 3)\nTest data shape: (2548, 128, 128, 3)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Define number of folds for cross-validation\nkfold = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.896504Z","iopub.execute_input":"2024-09-15T01:14:16.896869Z","iopub.status.idle":"2024-09-15T01:14:16.901301Z","shell.execute_reply.started":"2024-09-15T01:14:16.896834Z","shell.execute_reply":"2024-09-15T01:14:16.900297Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"input_shape = (IMG_WIDTH, IMG_HEIGHT, 3)\nnum_classes = len(label_encoder.classes_)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.902480Z","iopub.execute_input":"2024-09-15T01:14:16.902907Z","iopub.status.idle":"2024-09-15T01:14:16.911783Z","shell.execute_reply.started":"2024-09-15T01:14:16.902871Z","shell.execute_reply":"2024-09-15T01:14:16.911012Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"def build_alexnet(input_shape, num_classes):\n    model = models.Sequential()\n\n    # Layer 1\n    model.add(layers.Conv2D(96, (11, 11), strides=4, activation='relu', input_shape=input_shape))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D((3, 3), strides=2))\n\n    # Layer 2\n    model.add(layers.Conv2D(256, (5, 5), padding='same', activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D((3, 3), strides=2))\n\n    # Layers 3, 4, 5\n    model.add(layers.Conv2D(384, (3, 3), padding='same', activation='relu'))\n    model.add(layers.Conv2D(384, (3, 3), padding='same', activation='relu'))\n    model.add(layers.Conv2D(256, (3, 3), padding='same', activation='relu'))\n    model.add(layers.MaxPooling2D((3, 3), strides=2))\n\n    # Flatten\n    model.add(layers.Flatten())\n\n    # Fully Connected Layers\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(4096, activation='relu'))\n    model.add(layers.Dropout(0.5))\n\n    # Output Layer\n    model.add(layers.Dense(num_classes, activation='softmax'))\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.912910Z","iopub.execute_input":"2024-09-15T01:14:16.913248Z","iopub.status.idle":"2024-09-15T01:14:16.923975Z","shell.execute_reply.started":"2024-09-15T01:14:16.913215Z","shell.execute_reply":"2024-09-15T01:14:16.922995Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"def build_vgg16(input_shape, num_classes):\n    # Load pre-trained VGG16 model + higher level layers\n    base_model = applications.VGG16(weights='imagenet', include_top=False, input_shape=input_shape)\n\n    # Freeze the convolutional base\n    base_model.trainable = False\n\n    # Create new model on top\n    inputs = Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.Flatten()(x)\n    x = layers.Dense(256, activation='relu')(x)\n    x = layers.Dropout(0.5)(x)\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs, outputs)\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.925214Z","iopub.execute_input":"2024-09-15T01:14:16.925514Z","iopub.status.idle":"2024-09-15T01:14:16.936297Z","shell.execute_reply.started":"2024-09-15T01:14:16.925482Z","shell.execute_reply":"2024-09-15T01:14:16.935428Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"def build_resnet50(input_shape, num_classes):\n    # Load pre-trained ResNet50 model + higher level layers\n    base_model = applications.ResNet50(weights='imagenet', include_top=False, input_shape=input_shape)\n\n    # Freeze the convolutional base\n    base_model.trainable = False\n\n    # Create new model on top\n    inputs = Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dense(256, activation='relu')(x)\n    x = layers.Dropout(0.5)(x)\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs, outputs)\n\n    return model\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.937338Z","iopub.execute_input":"2024-09-15T01:14:16.937643Z","iopub.status.idle":"2024-09-15T01:14:16.945910Z","shell.execute_reply.started":"2024-09-15T01:14:16.937611Z","shell.execute_reply":"2024-09-15T01:14:16.944953Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"def build_inceptionv3(input_shape, num_classes):\n    # Load pre-trained InceptionV3 model + higher level layers\n    base_model = applications.InceptionV3(weights='imagenet', include_top=False, input_shape=input_shape)\n\n    # Freeze the convolutional base\n    base_model.trainable = False\n\n    # Create new model on top\n    inputs = Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dense(256, activation='relu')(x)\n    x = layers.Dropout(0.5)(x)\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs, outputs)\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.946951Z","iopub.execute_input":"2024-09-15T01:14:16.947236Z","iopub.status.idle":"2024-09-15T01:14:16.958629Z","shell.execute_reply.started":"2024-09-15T01:14:16.947204Z","shell.execute_reply":"2024-09-15T01:14:16.957696Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"def build_custom_cnn(input_shape, num_classes):\n    model = models.Sequential()\n\n    # Convolutional Block 1\n    model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=input_shape))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D((2,2)))\n\n    # Convolutional Block 2\n    model.add(layers.Conv2D(64, (3,3), activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D((2,2)))\n\n    # Convolutional Block 3\n    model.add(layers.Conv2D(128, (3,3), activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D((2,2)))\n\n    # Flatten\n    model.add(layers.Flatten())\n\n    # Fully Connected Layers\n    model.add(layers.Dense(256, activation='relu'))\n    model.add(layers.Dropout(0.5))\n\n    # Output Layer\n    model.add(layers.Dense(num_classes, activation='softmax'))\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.959660Z","iopub.execute_input":"2024-09-15T01:14:16.960022Z","iopub.status.idle":"2024-09-15T01:14:16.969644Z","shell.execute_reply.started":"2024-09-15T01:14:16.959979Z","shell.execute_reply":"2024-09-15T01:14:16.968679Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Training parameters\nbatch_size = 32\nepochs =  15 # Adjust based on computational resources","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:15:13.163084Z","iopub.execute_input":"2024-09-15T01:15:13.163895Z","iopub.status.idle":"2024-09-15T01:15:13.168240Z","shell.execute_reply.started":"2024-09-15T01:15:13.163854Z","shell.execute_reply":"2024-09-15T01:15:13.167152Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"# Store results for each fold\nfold_results = []\n\n# Stratified K-Fold Cross-Validation\nfor fold, (train_idx, val_idx) in enumerate(kfold.split(X_train, y_train)):\n    print(f\"\\nTraining fold {fold+1}...\")\n\n    # Split data\n    X_tr, X_val = X_train[train_idx], X_train[val_idx]\n    y_tr, y_val = y_train[train_idx], y_train[val_idx]\n\n    # Create data generators\n    train_generator = train_datagen.flow(X_tr, y_tr, batch_size=batch_size)\n    val_generator = test_datagen.flow(X_val, y_val, batch_size=batch_size)\n\n    # Build model (e.g., AlexNet)\n    model = build_alexnet(input_shape, num_classes)\n\n    # Compile model\n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy'])\n\n    # Callbacks\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n    ]\n\n    # Train model\n    history = model.fit(\n        train_generator,\n        epochs=epochs,\n        validation_data=val_generator,\n        callbacks=callbacks\n    )\n\n    # Evaluate on validation data\n    val_loss, val_acc = model.evaluate(val_generator)\n    print(f\"Validation Accuracy for fold {fold+1}: {val_acc:.4f}\")\n\n    # Store fold results\n    fold_results.append({\n        'fold': fold+1,\n        'model': model,\n        'history': history,\n        'val_accuracy': val_acc\n    })","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:15:17.730648Z","iopub.execute_input":"2024-09-15T01:15:17.731448Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"\nTraining fold 1...\nEpoch 1/15\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1726362924.028489    2237 service.cc:145] XLA service 0x7f4f08007da0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1726362924.028547    2237 service.cc:153]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m  3/213\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m14s\u001b[0m 67ms/step - accuracy: 0.1684 - loss: 12.3931","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1726362930.405539    2237 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m213/213\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 139ms/step - accuracy: 0.2503 - loss: 2.3469 - val_accuracy: 0.2511 - val_loss: 1.3866\nEpoch 2/15\n\u001b[1m213/213\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 111ms/step - accuracy: 0.2433 - loss: 1.3874 - val_accuracy: 0.2511 - val_loss: 1.3868\nEpoch 3/15\n\u001b[1m213/213\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 111ms/step - accuracy: 0.2425 - loss: 1.3871 - val_accuracy: 0.2487 - val_loss: 1.3865\nEpoch 4/15\n\u001b[1m213/213\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 111ms/step - accuracy: 0.2481 - loss: 1.3866 - val_accuracy: 0.2487 - val_loss: 1.3863\nEpoch 5/15\n\u001b[1m213/213\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 111ms/step - accuracy: 0.2503 - loss: 1.3865 - val_accuracy: 0.2490 - val_loss: 1.3863\nEpoch 6/15\n\u001b[1m213/213\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 110ms/step - accuracy: 0.2473 - loss: 1.3865 - val_accuracy: 0.2511 - val_loss: 1.3863\nEpoch 7/15\n","output_type":"stream"}]},{"cell_type":"code","source":"# Find the model with the highest validation accuracy\nbest_fold = max(fold_results, key=lambda x: x['val_accuracy'])\nbest_model = best_fold['model']\nprint(f\"\\nBest model from fold {best_fold['fold']} with validation accuracy {best_fold['val_accuracy']:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.986509Z","iopub.status.idle":"2024-09-15T01:14:16.986939Z","shell.execute_reply.started":"2024-09-15T01:14:16.986743Z","shell.execute_reply":"2024-09-15T01:14:16.986769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test data generator\ntest_generator = test_datagen.flow(X_test, y_test, batch_size=batch_size, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.988106Z","iopub.status.idle":"2024-09-15T01:14:16.988490Z","shell.execute_reply.started":"2024-09-15T01:14:16.988290Z","shell.execute_reply":"2024-09-15T01:14:16.988309Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_loss, test_acc = best_model.evaluate(test_generator)\nprint(f\"Test Accuracy: {test_acc:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.990070Z","iopub.status.idle":"2024-09-15T01:14:16.990414Z","shell.execute_reply.started":"2024-09-15T01:14:16.990238Z","shell.execute_reply":"2024-09-15T01:14:16.990255Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predict probabilities\ny_pred_prob = best_model.predict(test_generator)\ny_pred = np.argmax(y_pred_prob, axis=1)\n\n# Classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n\n# Confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(cm, annot=True, fmt='d', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.991643Z","iopub.status.idle":"2024-09-15T01:14:16.992043Z","shell.execute_reply.started":"2024-09-15T01:14:16.991861Z","shell.execute_reply":"2024-09-15T01:14:16.991880Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import label_binarize\n\n# Binarize the labels\ny_test_binarized = label_binarize(y_test, classes=range(num_classes))\ny_pred_prob_binarized = y_pred_prob\n\n# Compute ROC curve and ROC area for each class\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(num_classes):\n    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_pred_prob_binarized[:, i])\n    roc_auc[i] = roc_auc_score(y_test_binarized[:, i], y_pred_prob_binarized[:, i])\n\n# Plot ROC curves for each class\nplt.figure()\nfor i in range(num_classes):\n    plt.plot(fpr[i], tpr[i], label=f'{label_encoder.classes_[i]} (AUC = {roc_auc[i]:.2f})')\n\nplt.plot([0,1], [0,1], 'k--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curves for Each Class')\nplt.legend(loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.993241Z","iopub.status.idle":"2024-09-15T01:14:16.993611Z","shell.execute_reply.started":"2024-09-15T01:14:16.993428Z","shell.execute_reply":"2024-09-15T01:14:16.993447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Store results for each fold\nfold_results = []\n\n# Stratified K-Fold Cross-Validation\nfor fold, (train_idx, val_idx) in enumerate(kfold.split(X_train, y_train)):\n    print(f\"\\nTraining fold {fold+1}...\")\n\n    # Split data\n    X_tr, X_val = X_train[train_idx], X_train[val_idx]\n    y_tr, y_val = y_train[train_idx], y_train[val_idx]\n\n    # Create data generators\n    train_generator = train_datagen.flow(X_tr, y_tr, batch_size=batch_size)\n    val_generator = test_datagen.flow(X_val, y_val, batch_size=batch_size)\n\n    # Build model (e.g., VGG16)\n    model = build_vgg16(input_shape, num_classes)\n\n    # Compile model\n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy'])\n\n    # Callbacks\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n    ]\n\n    # Train model\n    history = model.fit(\n        train_generator,\n        epochs=epochs,\n        validation_data=val_generator,\n        callbacks=callbacks\n    )\n\n    # Evaluate on validation data\n    val_loss, val_acc = model.evaluate(val_generator)\n    print(f\"Validation Accuracy for fold {fold+1}: {val_acc:.4f}\")\n\n    # Store fold results\n    fold_results.append({\n        'fold': fold+1,\n        'model': model,\n        'history': history,\n        'val_accuracy': val_acc\n    })","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.994923Z","iopub.status.idle":"2024-09-15T01:14:16.995449Z","shell.execute_reply.started":"2024-09-15T01:14:16.995107Z","shell.execute_reply":"2024-09-15T01:14:16.995125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Find the model with the highest validation accuracy\nbest_fold = max(fold_results, key=lambda x: x['val_accuracy'])\nbest_model = best_fold['model']\nprint(f\"\\nBest model from fold {best_fold['fold']} with validation accuracy {best_fold['val_accuracy']:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.997000Z","iopub.status.idle":"2024-09-15T01:14:16.997350Z","shell.execute_reply.started":"2024-09-15T01:14:16.997175Z","shell.execute_reply":"2024-09-15T01:14:16.997193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test data generator\ntest_generator = test_datagen.flow(X_test, y_test, batch_size=batch_size, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:16.998580Z","iopub.status.idle":"2024-09-15T01:14:16.998955Z","shell.execute_reply.started":"2024-09-15T01:14:16.998773Z","shell.execute_reply":"2024-09-15T01:14:16.998792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_loss, test_acc = best_model.evaluate(test_generator)\nprint(f\"Test Accuracy: {test_acc:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:17.000196Z","iopub.status.idle":"2024-09-15T01:14:17.000530Z","shell.execute_reply.started":"2024-09-15T01:14:17.000361Z","shell.execute_reply":"2024-09-15T01:14:17.000378Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predict probabilities\ny_pred_prob = best_model.predict(test_generator)\ny_pred = np.argmax(y_pred_prob, axis=1)\n\n# Classification report\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n\n# Confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(cm, annot=True, fmt='d', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:17.001483Z","iopub.status.idle":"2024-09-15T01:14:17.001855Z","shell.execute_reply.started":"2024-09-15T01:14:17.001645Z","shell.execute_reply":"2024-09-15T01:14:17.001663Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import label_binarize\n\n# Binarize the labels\ny_test_binarized = label_binarize(y_test, classes=range(num_classes))\ny_pred_prob_binarized = y_pred_prob\n\n# Compute ROC curve and ROC area for each class\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(num_classes):\n    fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_pred_prob_binarized[:, i])\n    roc_auc[i] = roc_auc_score(y_test_binarized[:, i], y_pred_prob_binarized[:, i])\n\n# Plot ROC curves for each class\nplt.figure()\nfor i in range(num_classes):\n    plt.plot(fpr[i], tpr[i], label=f'{label_encoder.classes_[i]} (AUC = {roc_auc[i]:.2f})')\n\nplt.plot([0,1], [0,1], 'k--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curves for Each Class')\nplt.legend(loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T01:14:17.002974Z","iopub.status.idle":"2024-09-15T01:14:17.003342Z","shell.execute_reply.started":"2024-09-15T01:14:17.003158Z","shell.execute_reply":"2024-09-15T01:14:17.003177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}